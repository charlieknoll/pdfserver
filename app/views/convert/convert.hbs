<h1>{{title}}</h1>

<form method="POST" action="/convert">
    <div class="form-group">
        <label for="">API Key</label>
        <input type="text" name="apiKey" id="" class="form-control" placeholder="" required value="{{apiKey}}">
        <small id="helpId" class="text-muted">Need an
            <a href="">API Key?</a>
        </small>
    </div>
    <div class="form-group">
        <div class="tabs-container">
            <ul class="nav nav-tabs" role="tablist">
                <li>
                    <a class="nav-link active show" data-toggle="tab" href="#tab-1"> URL Conversion</a>
                </li>
                <li>
                    <a class="nav-link" data-toggle="tab" href="#tab-2">HTML Conversion</a>
                </li>
            </ul>
            <div class="tab-content">
                <div role="tabpanel" id="tab-1" class="tab-pane active show">
                    <div class="panel-body">

                        <label for="">Url to convert</label>
                        <input type="text" name="value" id="" class="form-control" placeholder="" aria-describedby="helpId" required value="{{url}}">
                        <small id="helpId" class="text-muted">We will never store your url request history.</small>
                    </div>
                </div>
                <div role="tabpanel" id="tab-2" class="tab-pane">
                    <div class="panel-body">
                        <textarea id="code" name="value">
<html style="color: green">
  <!-- this is a comment -->
  <head>
    <title>Mixed HTML Example</title>
    <style type="text/css">
      h1 {font-family: comic sans; color: #f0f;}
      div {background: yellow !important;}
      body {
        max-width: 50em;
        margin: 1em 2em 1em 5em;
      }
    </style>
  </head>
  <body>
    <h1>Mixed HTML Example</h1>
    <script>
        function jsFunc(arg1, arg2) {
            if (arg1 && arg2) document.body.innerHTML = "achoo";
        }
    </script>
  </body>
</html>
</textarea>

                    </div>
                </div>
            </div>


        </div>



    </div>
    <div class="row">
        <div class="col-lg-3">
            <div class="form-group">
                <label for="">Format:</label>
                <select class="form-control" name="format" id="">

                    {{#each formats}}
                    <option {{#if this.selected}}selected{{/if}}>{{this.value}}</option>
                    {{/each}}
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-2">
            <div class="form-group">
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="landscape" name="landscape">
                    <label class="custom-control-label" for="landscape">Landscape</label>
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="form-group">
                <div class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" id="printMedia" name="printMedia">
                    <label class="custom-control-label" for="printMedia">Print Media</label>
                </div>
            </div>
        </div>
    </div>
    {{!--
    <div class="form-group">
        <div class="custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="waitForJs" name="waitForJs">
            <label class="custom-control-label" for="waitForJs">Wait For JS</label>
        </div>
        <small id="helpId" class="text-muted">Pdf will not begin until window.RESPONSIVE_PAPER_READY_TO_RENDER=true</small>
    </div>
    <div class="form-group">
        <div class="custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="devMode" name="devMode">
            <label class="custom-control-label" for="devMode">Dev Mode</label>
        </div>
        <small id="helpId" class="text-muted">Pdf will displayed as html with console messages</small>
    </div>
    <div class="form-group">
        <label for="">Report element query selector:</label>
        <input type="text" name="selector" id="" class="form-control" placeholder="" aria-describedby="selectorHelp">
        <small id="selectorHelp" class="text-muted">By default the entire body content will be rendered. You can select a subsection of the the html by entering a valid
            <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors">query selector</a> .</small>
    </div> --}}
    <button type="submit " class="btn btn-primary ">Submit</button>
</form>
<div id="app " style="display: none ">

    <b-form @submit="onSubmit " @reset="onReset " v-if="show " method="POST " action="/pdf ">

        <b-row>
            <b-col>
                <b-form-group label="Css overrides: " description="Enter any styles to override on the target page (or
                urls). ">
                    <b-form-textarea type="text " v-model="form.css " name="css " :rows="3 " placeholder="body { font-size:
                .8em !important;} " description=" ">
                        </b-form-input>
                </b-form-group>
            </b-col>
            <b-col>
                <b-form-group label="Pre render script: " label-for="e2 " description="Enter any script to run before printing
                (or urls) ">
                    <b-form-textarea type="text " v-model="form.script " name="script " :rows="3 " placeholder="document.getElementById(
                'img1').style.maxWidth='100%' ; ">
                        </b-form-input>
                </b-form-group>
            </b-col>
        </b-row>

        <b-button type="submit " variant="primary ">Submit</b-button>
        <b-button type="reset " variant="danger ">Reset</b-button>
    </b-form>
</div>

{{!--
<script>

    window.onload = function () {
        var app = new Vue({
            el: "#app ",
            data: function () {
                return {
                    form: {
                        url: 'http://localhost:8080/examples/presentation/',
                        css: '',
                        script: '',
                        format: 'Letter',
                        landscape: false,
                        print: false,
                        hiddenElementSelectors: null,
                        waitForJs: false
                    },
                    formats: [
                        { text: 'Select paper size', value: null },
                        'Letter', 'Legal', 'Ledger', 'Tabloid', 'A4', 'A5', 'A6'
                    ],
                    show: true
                }
            },
            methods: {
                onSubmit(evt) {
                    //evt.preventDefault();
                    //alert(JSON.stringify(this.form));
                },
                onReset(evt) {
                    evt.preventDefault();
                    /* Reset our form values */
                    this.form.email = '';
                    this.form.name = '';
                    this.form.food = null;
                    this.form.checked = [];
                    /* Trick to reset/clear native browser form validation state */
                    this.show = false;
                    this.$nextTick(() => { this.show = true });
                }
            }
        });
        document.getElementById("app ").style.display = '';
    };
</script>

<!-- b-form-1.vue -->--}} {{#section 'style'}}
<link href="/lib/codemirror/codemirror.css" rel="stylesheet"> {{/section}} {{#section 'script'}}

<script src="/lib/codemirror/codemirror.js"></script>
<script>
    // Define an extended mixed-mode that understands vbscript and
    // leaves mustache/handlebars embedded templates in html mode
    var mixedMode = {
        name: "htmlmixed",
        scriptTypes: [{
            matches: /\/x-handlebars-template|\/x-mustache/i,
            mode: null
        },
        {
            matches: /(text|application)\/(x-)?vb(a|script)/i,
            mode: "vbscript"
        }]
    };
    var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
        mode: mixedMode,
        selectionPointer: true
    });
</script>{{/section}}